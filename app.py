import streamlit as st
import rendelesek
import vagott_uvegek
import pandas as pd
from streamlit_calendar import calendar
import tusolofulkek
import kepkeretek
import toml
import gspread
import pandas as pd
from oauth2client.service_account import ServiceAccountCredentials
from gspread_dataframe import set_with_dataframe
import gspread
from google.oauth2.service_account import Credentials
import json
import os
import termok
import datetime
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
import base64

# AES visszafejt√©si funkci√≥
def decrypt_password(encrypted_password: str, secret_key: bytes):
    # Az IV √©s a titkos√≠tott jelsz√≥ sz√©tv√°laszt√°sa
    iv_b64, encrypted_password_b64 = encrypted_password.split(":")
    
    # Az IV √©s a titkos√≠tott jelsz√≥ Base64 dek√≥dol√°sa
    iv = base64.b64decode(iv_b64)
    encrypted_password = base64.b64decode(encrypted_password_b64)
    
    # AES cipher objektum l√©trehoz√°sa a titkos√≠t√°si kulccsal √©s az IV-vel
    cipher = AES.new(secret_key, AES.MODE_CBC, iv)
    
    # Jelsz√≥ visszafejt√©se
    decrypted_password = unpad(cipher.decrypt(encrypted_password), AES.block_size)
    
    return decrypted_password.decode('utf-8')
        
# Ellen≈ërizz√ºk, hogy a titok t√©nylegesen l√©tezik-e
if "GOOGLE_SHEET_CREDENTIALS" in st.secrets:
    google_credentials = st.secrets["GOOGLE_SHEET_CREDENTIALS"]
else:
    raise ValueError("A GOOGLE_SHEET_CREDENTIALS titok nem tal√°lhat√≥!")

# Google Sheets hiteles√≠t√©s
creds = Credentials.from_service_account_info(google_credentials, scopes=[
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
])

client = gspread.authorize(creds)

# A Google T√°bl√°zat el√©r√©se
SHEET_ID = "1MrOG_Tlti2lWoVtrK8YsVsuI5UIWS8CTRRPVH1LjlEI"
sheet = client.open_by_key(SHEET_ID)



# Streamlit gyors√≠t√≥t√°raz√°s (csak ha nem v√°ltozik gyakran)
@st.cache_data
def collect_calendar_data():
    worksheet = sheet.worksheet("Hat√°rid≈ëk")
    df = pd.DataFrame(worksheet.get_all_records())
    return df

def modify_calendar_data(df):
    worksheet = sheet.worksheet("Hat√°rid≈ëk")

    # üõ†Ô∏è Adatok t√∂rl√©se √©s √∫jra√≠r√°sa
    worksheet.clear()

    # D√°tumform√°z√°s biztos√≠t√°sa
    df["start"] = pd.to_datetime(df["start"], errors="coerce").dt.strftime("%Y-%m-%d")

    set_with_dataframe(worksheet, df)

# Pr√≥b√°ljuk meg beolvasni a secrets f√°jlt
try:
    secrets = toml.load(".streamlit/secrets.toml")  # Vagy "config.toml"
    users = secrets.get("users", {})
    secret_key = base64.b64decode(secrets["SECRET_KEY"])  # Titkos√≠t√°si kulcs Base64-b≈ël dek√≥dolva
except Exception as e:
    st.error(f"Hiba a secrets.toml bet√∂lt√©sekor: {e}")
    users = {}
    secret_key = None


# üìå Session state inicializ√°l√°s
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
    st.session_state.role = None
    st.session_state.username = None
    st.session_state.username_str = None


def login_page():
    st.markdown("## üîê Bejelentkez√©s")
    # Beviteli mez≈ëk
    username = st.text_input("Felhaszn√°l√≥n√©v")
    password = st.text_input("Jelsz√≥", type="password")
# Jelsz√≥ ellen≈ërz√©se bel√©p√©skor

# üîê Jelsz√≥ ellen≈ërz√©s
def check_user_password(username: str, password: str):
    """A be√≠rt jelsz√≥ √∂sszehasonl√≠t√°sa a titkos√≠tott v√°ltozattal."""
    if username in users:
        encrypted_password = users[username]["password"]
        decrypted_password = decrypt_password(encrypted_password, secret_key)

        if decrypted_password and decrypted_password == password:
            return True
    return False

# üîë Bejelentkez√©si oldal
def login_page():
    st.markdown("## üîê Bejelentkez√©s")

    username = st.text_input("Felhaszn√°l√≥n√©v")
    password = st.text_input("Jelsz√≥", type="password")

    if st.button("Bejelentkez√©s"):
        if check_user_password(username, password):
            # Bejelentkez√©si adatok ment√©se
            st.session_state.authenticated = True
            st.session_state.role = users[username]["role"]
            st.session_state.username = username
            st.session_state.username_str = users[username]["nev"]
            
            st.success(f"‚úÖ Sikeres bejelentkez√©s: {st.session_state.username_str}")
            st.rerun()
        else:
            st.error("‚ùå Hib√°s felhaszn√°l√≥n√©v vagy jelsz√≥!")

# üè† **F≈ë tartalom**
def main_content():

    # üéõÔ∏è Sidebar men√º
    st.sidebar.title("Navig√°ci√≥")

    if st.session_state.role == "admin":
        pages = ["F≈ëoldal", "Term√≥ sz√°m√≠t√°sok", "V√°gott √ºveg sz√°m√≠t√°sok", "Tusol√≥f√ºlke sz√°m√≠t√°sok"]
    elif st.session_state.role in ["glaserdi_fonok", "glaserdi_alkalmazott"]:
        pages = ["F≈ëoldal", "Term√≥ sz√°m√≠t√°sok", "V√°gott √ºveg sz√°m√≠t√°sok",
                 "Tusol√≥f√ºlke sz√°m√≠t√°sok", "K√©pkeret sz√°m√≠t√°sok", "Bej√∂v≈ë rendel√©sek"]
    elif st.session_state.role == "vasarlo":
        pages = ["Term√≥ sz√°m√≠t√°sok", "V√°gott √ºveg sz√°m√≠t√°sok"]
    else:
        pages = []

    page = st.sidebar.radio("V√°lassz egy oldalt:", pages)
        
    if page == "F≈ëoldal":
        st.title("üìÜ Hat√°rid≈ë Napt√°r")
        
        deadlines = collect_calendar_data()
        filtered_deadlines = pd.DataFrame()
        
        try:
            deadlines["start"] = pd.to_datetime(deadlines["start"], errors="coerce")

            # Ellen≈ërizz√ºk, hogy nincs-e rossz d√°tum
            df = deadlines.dropna(subset=["start"])

            # Streamlit Calendar esem√©nyek l√©trehoz√°sa
            events = [{"title": row["title"], "start": row["start"].strftime("%Y-%m-%d")} for _, row in
                      df.iterrows()]
            
            # Napt√°r megjelen√≠t√©se
            calendar_options = {"initialView": "dayGridMonth",  # Alap√©rtelmezett n√©zet: havi n√©zet
                                "firstDay": 1,  # H√©tf≈ëi kezd√©s
                                "locale": "hu",  # Magyar nyelv
                                "views": {
                                    "dayGridMonth": {},  # Havi n√©zet
                                    "listMonth": {}  # Lista n√©zet
                                },
                                "headerToolbar": {
                                    "left": "prev,next today",  # El≈ëz≈ë, k√∂vetkez≈ë h√≥nap √©s 'Ma' gomb
                                    "center": "title",  # K√∂z√©pen a c√≠m
                                    "right": "dayGridMonth,listMonth"  # N√©zetv√°laszt√≥: havi √©s lista n√©zet
                                },
                                "height": 800,  # Megn√∂velt m√©ret
                                "contentHeight": 700
                               }
            if st.button("üîÑ Napt√°r friss√≠t√©se"):
                st.cache_data.clear()
                st.cache_resource.clear()
                st.rerun()
            calendar(events, options=calendar_options)
    

        except Exception as e:
            st.error(f"Hiba t√∂rt√©nt az adatok beolvas√°sa k√∂zben: {e}")
            
        st.header("‚úèÔ∏è Hat√°rid≈ë M√≥dos√≠t√°sa")
        if not deadlines.empty:
            selected_deadline = st.selectbox("V√°lassz egy hat√°rid≈ët m√≥dos√≠t√°sra:", deadlines["title"])
            current_date = deadlines.loc[deadlines["title"] == selected_deadline, "start"].values[0]

            new_date = st.date_input("√öj hat√°rid≈ë:", pd.to_datetime(current_date))
            new_title = st.text_input("√öj n√©v:", selected_deadline, key="new_title")

            if st.button("M√≥dos√≠t√°s ment√©se"):
                deadlines.loc[deadlines["title"] == selected_deadline, ["title", "start"]] = [new_title,
                                                                                              new_date.strftime(
                                                                                                  "%Y-%m-%d")]

                modify_calendar_data(deadlines)
                collect_calendar_data.clear()

                st.success(
                    f"‚úÖ '{selected_deadline}' m√≥dos√≠tva '{new_title}' n√©vre √©s √∫j d√°tuma: {new_date.strftime('%Y-%m-%d')}!")
                st.rerun()
        st.header("‚ûï √öj hat√°rid≈ë hozz√°ad√°sa")
        
        # Beviteli mez≈ëk
        uj_megrendeles = st.text_input("Megrendel√©s neve")
        uj_hatarido = st.date_input("Hat√°rid≈ë")
        uj_darabszam = st.number_input("Darabsz√°m", min_value=1, step=1)
        uj_terulet = st.text_input("Ter√ºlet")
        
        if st.button("Hozz√°ad√°s"):
            if uj_megrendeles and uj_hatarido and uj_terulet:
                # √öj bejegyz√©s l√©trehoz√°sa
                new_entry = pd.DataFrame([{
                    "title": uj_megrendeles,
                    "start": uj_hatarido.strftime("%Y-%m-%d"),
                    "Darabsz√°m": uj_darabszam,
                    "Ter√ºlet": uj_terulet
                }])
        
                # Megl√©v≈ë adatok lek√©r√©se
                deadlines = collect_calendar_data()
        
                # √öj adat hozz√°f≈±z√©se
                deadlines = pd.concat([deadlines, new_entry], ignore_index=True)
        
                # M√≥dos√≠t√°sok ment√©se a Google Sheets-be
                modify_calendar_data(deadlines)
        
                # Gyors√≠t√≥t√°r t√∂rl√©se, hogy a friss adatok megjelenjenek
                collect_calendar_data.clear()
        
                st.success(f"‚úÖ A k√∂vetkez≈ë hat√°rid≈ë hozz√°adva: {uj_megrendeles} - {uj_hatarido.strftime('%Y-%m-%d')}")
                st.rerun()
            else:
                st.error("‚ùå Minden mez≈ët ki kell t√∂lteni!")

        
        st.header("üóëÔ∏è Hat√°rid≈ë t√∂rl√©se")
        if not deadlines.empty:
            selected_deadline = st.selectbox("V√°lassz egy hat√°rid≈ët t√∂rl√©sre:", deadlines["title"])

            if st.button("Kiv√°lasztott hat√°rid≈ë t√∂rl√©se"):
                deadlines = deadlines[deadlines["title"] != selected_deadline]
                modify_calendar_data(deadlines)
                st.success(f"‚úÖ '{selected_deadline}' t√∂r√∂lve!")
                st.rerun()
        else:
            st.info("Nincsenek hat√°rid≈ëk.")
            
        st.header("üìò Hat√°rid≈ëk napl√≥z√°sa")
        if not deadlines.empty:
            selected_day = date = st.date_input("V√°lassz egy d√°tumot")
            selected_day_str = selected_day.strftime("%Y-%m-%d")  # Kiv√°lasztott d√°tumot √°talak√≠tjuk stringg√©
            deadlines["start"] = pd.to_datetime(deadlines["start"], errors="coerce").dt.strftime("%Y-%m-%d")  # D√°tumok form√°z√°sa
        
            if st.button("Napl√≥z√°s"):
                # Az adott napra vonatkoz√≥ rendel√©sek sz≈±r√©se
                filtered_deadlines = deadlines[deadlines["start"] == selected_day_str]  # String alap√∫ √∂sszehasonl√≠t√°s
        
                # Ha vannak rendel√©sek, akkor ki√≠rjuk ≈ëket
                if not filtered_deadlines.empty:
                    st.write("üìÖ **Az adott napi rendel√©sek:**")
                    # Oszlopnevek √°tnevez√©se egy √∫j DataFrame-ben
                    filtered_display = filtered_deadlines.rename(columns={"title": "Megrendel√©s neve"})
                    
                    # Csak a k√≠v√°nt oszlopok megjelen√≠t√©se az √∫j nevekkel
                    st.dataframe(filtered_display[["Megrendel√©s neve", "Darabsz√°m", "Ter√ºlet"]])
                else:
                    st.info("Nincs rendel√©s ezen a napon.")
        else:
            st.info("Nincsenek hat√°rid≈ëk.")

    elif page == "Term√≥ sz√°m√≠t√°sok":
        termok.show(st.session_state.role, st.session_state.username_str)

    elif page == "V√°gott √ºveg sz√°m√≠t√°sok":
        vagott_uvegek.show()

    elif page == "Tusol√≥f√ºlke sz√°m√≠t√°sok":
        tusolofulkek.show()

    elif page == "K√©pkeret sz√°m√≠t√°sok":
        kepkeretek.show()

    elif page == "Bej√∂v≈ë rendel√©sek":
        rendelesek.show()

    # elif page == "√öj √ºgyf√©l regisztr√°l√°sa":
    #     regisztracio.show()

# üî• **F≈ë programlogika**
if not st.session_state.authenticated:
    login_page()
else:
    main_content()
