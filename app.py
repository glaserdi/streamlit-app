import streamlit as st
import rendelesek
import vagott_uvegek
import pandas as pd
from streamlit_calendar import calendar
import tusolofulkek
import kepkeretek
import toml
import gspread
import pandas as pd
from oauth2client.service_account import ServiceAccountCredentials
from gspread_dataframe import set_with_dataframe
import gspread
from google.oauth2.service_account import Credentials
import json
import os
import termok

# Ellen≈ërizz√ºk, hogy a titok t√©nylegesen l√©tezik-e
if "GOOGLE_SHEET_CREDENTIALS" in st.secrets:
    google_credentials = st.secrets["GOOGLE_SHEET_CREDENTIALS"]
else:
    raise ValueError("A GOOGLE_SHEET_CREDENTIALS titok nem tal√°lhat√≥!")

# Google Sheets hiteles√≠t√©s
creds = Credentials.from_service_account_info(google_credentials, scopes=[
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
])

client = gspread.authorize(creds)

# A Google T√°bl√°zat el√©r√©se
SHEET_ID = "1MrOG_Tlti2lWoVtrK8YsVsuI5UIWS8CTRRPVH1LjlEI"
sheet = client.open_by_key(SHEET_ID)



# Streamlit gyors√≠t√≥t√°raz√°s (csak ha nem v√°ltozik gyakran)
@st.cache_data
def collect_calendar_data():
    worksheet = sheet.worksheet("Hat√°rid≈ëk")
    df = pd.DataFrame(worksheet.get_all_records())
    return df


def modify_calendar_data(df):
    worksheet = sheet.worksheet("Hat√°rid≈ëk")

    # üõ†Ô∏è Adatok t√∂rl√©se √©s √∫jra√≠r√°sa
    worksheet.clear()

    # D√°tumform√°z√°s biztos√≠t√°sa
    df["start"] = pd.to_datetime(df["start"], errors="coerce").dt.strftime("%Y-%m-%d")

    set_with_dataframe(worksheet, df)

# Pr√≥b√°ljuk meg beolvasni a secrets f√°jlt
try:
    secrets = toml.load(".streamlit/secrets.toml")  # Vagy "config.toml"
    users = secrets.get("users", {})
except Exception as e:
    st.error(f"Hiba a secrets.toml bet√∂lt√©sekor: {e}")
    users = {}


# üìå Session state inicializ√°l√°s
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False
    st.session_state.role = None
    st.session_state.username = None
    st.session_state.username_str = None





# üîê Bejelentkez√©si oldal
def login_page():
    st.markdown("## üîê Bejelentkez√©s")
    # Beviteli mez≈ëk
    username = st.text_input("Felhaszn√°l√≥n√©v")
    password = st.text_input("Jelsz√≥", type="password")

    if st.button("Bejelentkez√©s"):
        if username in users and users[username]["password"] == password:
            st.session_state.authenticated = True
            st.session_state.role = users[username]["role"]
            st.session_state.username = username
            st.session_state.username_str = users[username]["nev"]
            st.success(f"‚úÖ Sikeres bejelentkez√©s: {st.session_state.username_str}")
            st.rerun()
        else:
            st.error("‚ùå Hib√°s felhaszn√°l√≥n√©v vagy jelsz√≥")

# üè† **F≈ë tartalom**
def main_content():

    # üéõÔ∏è Sidebar men√º
    st.sidebar.title("Navig√°ci√≥")

    if st.session_state.role == "admin":
        pages = ["F≈ëoldal", "Term√≥ sz√°m√≠t√°sok", "V√°gott √ºveg sz√°m√≠t√°sok", "Tusol√≥f√ºlke sz√°m√≠t√°sok"]
    elif st.session_state.role in ["glaserdi_fonok", "glaserdi_alkalmazott"]:
        pages = ["F≈ëoldal", "Term√≥ sz√°m√≠t√°sok", "V√°gott √ºveg sz√°m√≠t√°sok",
                 "Tusol√≥f√ºlke sz√°m√≠t√°sok", "K√©pkeret sz√°m√≠t√°sok", "Bej√∂v≈ë rendel√©sek"]
    elif st.session_state.role == "vasarlo":
        pages = ["Term√≥ sz√°m√≠t√°sok"]
    else:
        pages = []

    page = st.sidebar.radio("V√°lassz egy oldalt:", pages)
    
    # üåü Fels≈ë s√°vban a kijelentkez√©s gomb
    if st.session_state.authenticated:
        logout_button = st.button("Kijelentkez√©s", key="logout_button")
        if logout_button:
            st.session_state.authenticated = False
            st.session_state.role = None
            st.session_state.username = None
            st.session_state.username_str = None
            st.success("‚úÖ Kijelentkez√©s sikeres.")
            st.experimental_rerun()
        
    if page == "F≈ëoldal":
        st.title("üìÜ Hat√°rid≈ë Napt√°r")
        deadlines = collect_calendar_data()
        try:
            deadlines["start"] = pd.to_datetime(deadlines["start"], errors="coerce")

            # Ellen≈ërizz√ºk, hogy nincs-e rossz d√°tum
            df = deadlines.dropna(subset=["start"])

            # Streamlit Calendar esem√©nyek l√©trehoz√°sa
            events = [{"title": row["title"], "start": row["start"].strftime("%Y-%m-%d")} for _, row in
                      df.iterrows()]

            # Napt√°r megjelen√≠t√©se
            calendar(events)

        except Exception as e:
            st.error(f"Hiba t√∂rt√©nt az adatok beolvas√°sa k√∂zben: {e}")

        st.header("‚úèÔ∏è Hat√°rid≈ë M√≥dos√≠t√°sa")
        if not deadlines.empty:
            selected_deadline = st.selectbox("V√°lassz egy hat√°rid≈ët m√≥dos√≠t√°sra:", deadlines["title"])
            current_date = deadlines.loc[deadlines["title"] == selected_deadline, "start"].values[0]

            new_date = st.date_input("√öj hat√°rid≈ë:", pd.to_datetime(current_date))
            new_title = st.text_input("√öj n√©v:", selected_deadline, key="new_title")

            if st.button("M√≥dos√≠t√°s ment√©se"):
                deadlines.loc[deadlines["title"] == selected_deadline, ["title", "start"]] = [new_title,
                                                                                              new_date.strftime(
                                                                                                  "%Y-%m-%d")]

                modify_calendar_data(deadlines)
                collect_calendar_data.clear()

                st.success(
                    f"‚úÖ '{selected_deadline}' m√≥dos√≠tva '{new_title}' n√©vre √©s √∫j d√°tuma: {new_date.strftime('%Y-%m-%d')}!")
                st.rerun()

        st.header("üóëÔ∏è Hat√°rid≈ë t√∂rl√©se")
        if not deadlines.empty:
            selected_deadline = st.selectbox("V√°lassz egy hat√°rid≈ët t√∂rl√©sre:", deadlines["title"])

            if st.button("Kiv√°lasztott hat√°rid≈ë t√∂rl√©se"):
                deadlines = deadlines[deadlines["title"] != selected_deadline]
                modify_calendar_data(deadlines)
                st.success(f"‚úÖ '{selected_deadline}' t√∂r√∂lve!")
                st.rerun()
        else:
            st.info("Nincsenek hat√°rid≈ëk.")

    elif page == "Term√≥ sz√°m√≠t√°sok":
        termok.show(st.session_state.role, st.session_state.username_str)

    elif page == "V√°gott √ºveg sz√°m√≠t√°sok":
        vagott_uvegek.show()

    elif page == "Tusol√≥f√ºlke sz√°m√≠t√°sok":
        tusolofulkek.show()

    elif page == "K√©pkeret sz√°m√≠t√°sok":
        kepkeretek.show()

    elif page == "Bej√∂v≈ë rendel√©sek":
        rendelesek.show()

# üî• **F≈ë programlogika**
if not st.session_state.authenticated:
    login_page()
else:
    main_content()
