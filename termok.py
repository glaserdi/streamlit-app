import streamlit as st
import pandas as pd
import io
import math
import read_excel
import numpy as np
import generate_price_offer as gen_p
import datetime
import constants as C


# üîπ TER√úLET SZ√ÅM√çT√ÅS
def terulet_szamitas(hosszusag, szelesseg, darabszam, spec_forma=False, tavtarto=False):
    # Alapter√ºlet sz√°m√≠t√°sa
    try:
        hosszusag = float(hosszusag)
        szelesseg = float(szelesseg)
        darabszam = int(darabszam)
    except ValueError:
        return [0, 0, 0]

    if hosszusag and szelesseg:
        terulet_siman = (hosszusag * szelesseg) / 1000000  # m^2-re √°tv√°ltva, ha mm-ben van megadva

        # Adal√©k sz√°m√≠t√°sa
        adalek = 0
        terulet_adalekkal = terulet_siman
        if terulet_siman <= C.MIN_TERULET or terulet_siman >= C.MAX_TERULET:
            adalek = C.ADALEK_SZORZO * terulet_siman
            terulet_adalekkal = terulet_siman + adalek  # Hozz√°adjuk az adal√©kot az alapter√ºlethez

        # T√°vtart√≥ vagy speci√°lis forma eset√©n √∫jabb 30% adal√©k az aktu√°lis ter√ºletre
        if spec_forma == "Elt√©r≈ë forma":
            adalek += C.FORMA_SZORZO * terulet_adalekkal
            terulet_adalekkal += C.FORMA_SZORZO * terulet_adalekkal  # Friss√≠tett ter√ºlet az adal√©kkal

        if tavtarto == "T√°vtart√≥":
            adalek += C.TAVTARTO_ADALEK * terulet_adalekkal
            terulet_adalekkal += C.TAVTARTO_ADALEK * terulet_adalekkal

        if terulet_adalekkal >= C.MAX_TERULET:
            st.warning("‚ö†Ô∏è Ellen≈ërizd a vastags√°got, biztons√°gi okokb√≥l!")

        # √ñsszes ter√ºlet sz√°m√≠t√°sa a darabsz√°mmal
        ossz_terulet = terulet_adalekkal * darabszam

        return [round(terulet_siman, 4) * darabszam, round(adalek, 4) * darabszam, round(ossz_terulet, 2)]
    else:
        st.error("‚ùå K√©rlek add meg a hossz√∫s√°got √©s a sz√©less√©get!")


@st.cache_data
def get_retegek_by_kod(termek_kod, duplex_list, triplex_list):
    if termek_kod in duplex_list:
        return "DUPLEX"
    elif termek_kod in triplex_list:
        return "TRIPLEX"


# üîπ √ÅR KALKUL√ÅCI√ì
@st.cache_data
def get_ar(df, termek_kod, arlista_szint):
    column_name = f"Elad√°si √År {arlista_szint}"
    filtered_rows = df.loc[df["Term√©k Kod"] == termek_kod, column_name]
    return float(filtered_rows.iloc[0]) if not filtered_rows.empty else None


def calculate_wood_pieces(df, reteg):
    lec_lista = []

    for _, row in df.iterrows():
        szelesseg = row["Sz√©less√©g"] + 20
        magassag = row["Magass√°g"] + 20

        lec_darabszam = 1 if reteg == "DUPLEX" else 2 if reteg == "TRIPLEX" else 1

        for _ in range(lec_darabszam):
            lec_lista.append(szelesseg)
            lec_lista.append(magassag)

    return sorted(lec_lista, reverse=True)  # Hosszabbakat el≈ësz√∂r


def optimize_cutting(lec_lista, max_length=6000):
    lec_lista = sorted(lec_lista, reverse=True)  # Cs√∂kken≈ë sorrendben rendezz√ºk (FFD strat√©gia)
    bins = []  # T√°roljuk a darabol√°sokat
    hulladekok = []  # T√°roljuk a hullad√©kokat

    for lec in lec_lista:
        best_fit_index = -1
        min_remaining_space = max_length + 1  # Kezdetben nagy √©rt√©k

        # Pr√≥b√°ljuk megtal√°lni a legjobb helyet
        for i, bin in enumerate(bins):
            remaining_space = max_length - sum(bin)
            if remaining_space >= lec and remaining_space - lec < min_remaining_space:
                best_fit_index = i
                min_remaining_space = remaining_space - lec

        # Ha van megfelel≈ë hely, beletessz√ºk
        if best_fit_index != -1:
            bins[best_fit_index].append(lec)
        else:
            # √öj v√°g√°st kezd√ºnk
            bins.append([lec])

    # Hullad√©k sz√°m√≠t√°sa
    hulladekok = [max_length - sum(bin) for bin in bins]

    return bins, hulladekok


def show():
    # üîπ EXCEL ADATOK BET√ñLT√âSE (Cache-el√©s)
    @st.cache_data
    def load_excel_data(file_path):
        df_termek_kod = pd.read_excel(file_path, sheet_name='TermekKod')
        df_vastagsag = pd.read_excel(file_path, sheet_name='Vastagsag')
        df_cegek_arlista = pd.read_excel(file_path, sheet_name='Arlista')
        return df_termek_kod, df_vastagsag, df_cegek_arlista

    df_termek_kod, df_vastagsag, df_cegek_arlista = load_excel_data(C.FILE_PATH)

    # üîπ TERM√âKK√ìDOK LEK√âR√âSE (Cache)
    @st.cache_data
    def get_product_codes(df, reteg):
        return df[df["Reteg"] == reteg]["Term√©k Kod"].tolist()

    duplex_codes = get_product_codes(df_termek_kod, "Duplex")
    triplex_codes = get_product_codes(df_termek_kod, "Triplex")
    vastagsag_lista = [""] + df_vastagsag["Vastagsag"].tolist()

    # üîπ RENDEL√âSEK T√ÅROL√ÅSA
    if "adathalmaz" not in st.session_state:
        st.session_state.adathalmaz = pd.DataFrame(
            columns=["Megrendel≈ë", "Hossz√∫s√°g", "Sz√©less√©g", "Darabsz√°m", "Ter√ºlet", "√År"])

    # üîπ FEL√úLET MEGJELEN√çT√âSE
    st.title("Term√≥ rendel√©sek")

    bevitel = st.radio("Hogyan szeretn√©d bevinni az adatokat?", ["K√©zi bevitel", "F√°jl felt√∂lt√©se"])
    megrendelok_lista = df_cegek_arlista["Ceg neve"]

    if bevitel == "K√©zi bevitel":
        megrendelo_neve = st.selectbox("Megrendel≈ë neve:", megrendelok_lista)
        if megrendelo_neve == "Mag√°nszem√©ly":
            megrendelo_neve = st.text_input("√çrd be a megrendel≈ë nev√©t")

        tipus = st.radio("V√°laszd ki a term√≥ t√≠pus√°t", ["Duplex", "Triplex"])
        termek_kod = st.selectbox("Term√©k k√≥d", duplex_codes if tipus == "Duplex" else triplex_codes)
        vastagsag = st.selectbox("Vastags√°g:", vastagsag_lista)

        st.write("**Opci√≥k**")
        col1, col2 = st.columns(2)
        with col1:
            argon = st.checkbox("Argonnal")
            melegperem = st.checkbox("Meleg perem")
        with col2:
            tavtarto = st.checkbox("T√°vtart√≥")
            forma = st.checkbox("Elt√©r≈ë forma")

        melegperem_szin = st.radio("Melegperem sz√≠ne", ["Fekete", "Sz√ºrke"]) if melegperem else None

        szelesseg = st.number_input("Sz√©less√©g (mm)", min_value=1, max_value=C.MAX_MERET,
                                    placeholder="√çrj be egy sz√°mot...")
        hosszusag = st.number_input("Hossz√∫s√°g (mm)", min_value=1, max_value=C.MAX_MERET,
                                    placeholder="√çrj be egy sz√°mot...")
        darabszam = st.number_input("Darabsz√°m", min_value=1, value=1, placeholder="√çrj be egy sz√°mot...")

        [terulet, adalek, ossz_terulet] = terulet_szamitas(hosszusag, szelesseg, darabszam, forma, tavtarto)
        st.write(f" Az √ºveg ter√ºlete {round(terulet, 2)} m¬≤, melyhez hozz√°j√∂n adal√©kk√©nt \
        {round(adalek, 2)} m¬≤, √≠gy az √∂sszter√ºlet = {round(terulet, 2)}  + {round(adalek, 2)} = {round(ossz_terulet, 2)} m¬≤")

        ar = 0
        if terulet > 0:
            arlista_szint = 2 if not df_cegek_arlista.loc[
                df_cegek_arlista["Ceg neve"] == megrendelo_neve, "Arlista"].empty else 0
            eladasi_ar = get_ar(df_termek_kod, termek_kod, arlista_szint)

            if eladasi_ar:
                if melegperem_szin:
                    eladasi_ar += C.MELEGPEREM_AR.get(tipus, 0)
                ar = ossz_terulet * eladasi_ar

            ar = math.ceil(ar)
            st.write(f"üí∞ **Sz√°m√≠tott √°r:** {ar:.2f} lej")

            if st.button("Hozz√°ad"):
                bevitt_adatok = {
                    "Megrendelo_neve": megrendelo_neve,
                    "Term√©kk√≥d": termek_kod,
                    "Vastags√°g": vastagsag,
                    "Magass√°g": hosszusag,
                    "Sz√©less√©g": szelesseg,
                    "Ter√ºlet": terulet,
                    "Adal√©k": adalek,
                    "√ñssz ter√ºlet": ossz_terulet,
                    "Darabsz√°m": darabszam,
                    "√År": ar,
                    "Argon": argon,
                    "T√°vart√≥": tavtarto,
                    "Melegperem": melegperem_szin,
                    "Elt√©r≈ë forma": forma,
                    "√úveg t√≠pusa": tipus
                }
                st.session_state.adathalmaz = pd.concat(
                    [st.session_state.adathalmaz, pd.DataFrame([bevitt_adatok])],
                    ignore_index=True
                )
                st.session_state.szelesseg = None
                st.session_state.hosszusag = None
                st.rerun()
        st.dataframe(st.session_state.adathalmaz, use_container_width=True)

        order_data_kezi = st.session_state.adathalmaz
        if not order_data_kezi.empty:
            pdf_buffer = gen_p.generate_pdf(order_data_kezi,
                                            "./logo_1.jpg",
                                            "pecset.jpg",
                                            "kezi"
                                            )

            st.download_button(
                label="üì• Let√∂lt√©s PDF-k√©nt",
                data=pdf_buffer,
                file_name=f"{megrendelo_neve}_{datetime.datetime.now()}_arajanlat.pdf",
                mime="application/pdf"
            )

        # output = io.BytesIO()
        # with pd.ExcelWriter(output, engine="xlsxwriter") as writer:
        #     st.session_state.adathalmaz.to_excel(writer, sheet_name="Rendel√©sek", index=False)
        # output.seek(0)
        #
        # st.download_button("‚¨áÔ∏è Excel let√∂lt√©se",
        #                    data=output,
        #                    file_name=f"rendeles_{megrendelo_neve}.xlsx",
        #                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

        # üîÑ CSV bet√∂lt√©se (ha van)
        try:
            deadlines = pd.read_csv(C.CSV_FILE)
        except FileNotFoundError:
            deadlines = pd.DataFrame(columns=["title", "start"])

        new_date = st.date_input("Hat√°rid≈ë:", datetime.date.today())
        task_name = st.text_input("Feladat neve:")

        if st.button("Hat√°rid≈ë hozz√°ad√°sa"):
            if task_name:
                new_entry = pd.DataFrame([{"title": task_name, "start": str(new_date)}])
                deadlines = pd.concat([deadlines, new_entry], ignore_index=True)
                deadlines.to_csv(C.CSV_FILE, index=False)  # üìÇ F√°jlba ment√©s
                st.success(f"‚úÖ Hozz√°adva: {task_name} - {new_date}")
                st.rerun()
            else:
                st.warning("‚ö†Ô∏è Adj meg egy feladatot!")


    elif bevitel == "F√°jl felt√∂lt√©se":
        uploaded_file = st.file_uploader("Choose a XLSX file", type="xlsx")

        if uploaded_file:
            try:
                order_data = read_excel.extract_order_data(uploaded_file)
                megrendelo_neve = order_data['Megrendel≈ë_neve'].iloc[0]
                hatarido = str(order_data['Hat√°rid≈ë'].iloc[0]).split(" ")[0]
                sorszam = order_data['Sorsz√°m_Megrendel√©s'].iloc[0]
                arlista_szint = 2 if not df_cegek_arlista.loc[
                    df_cegek_arlista["Ceg neve"] == megrendelo_neve, "Arlista"].empty else 0
                order_data["Megrendelo_neve"] = megrendelo_neve
                required_columns = ["Sz√©less√©g", "Magass√°g", "√úveg t√≠pusa"]
                if all(col in order_data.columns for col in required_columns):

                    order_data['Ter√ºlet'] = order_data.apply(
                        lambda row: terulet_szamitas(row['Magass√°g'],
                                                     row['Sz√©less√©g'],
                                                     row['Darabsz√°m'],
                                                     row["Elt√©r≈ë forma"],
                                                     row["T√°vtart√≥"]
                                                     )[0], axis=1)
                    order_data['Adal√©k'] = order_data.apply(
                        lambda row: terulet_szamitas(row['Magass√°g'],
                                                     row['Sz√©less√©g'],
                                                     row['Darabsz√°m'],
                                                     row["Elt√©r≈ë forma"],
                                                     row["T√°vtart√≥"]
                                                     )[1], axis=1)
                    order_data['√ñssz ter√ºlet'] = order_data.apply(
                        lambda row: terulet_szamitas(row['Magass√°g'],
                                                     row['Sz√©less√©g'],
                                                     row['Darabsz√°m'],
                                                     row["Elt√©r≈ë forma"],
                                                     row["T√°vtart√≥"]
                                                     )[2], axis=1)

                    order_data["Egys√©g√°r"] = order_data.apply(
                        lambda row: get_ar(df_termek_kod, row["√úveg t√≠pusa"], arlista_szint), axis=1
                    )

                    if order_data["Melegperem"][0] == "fekete" or order_data["Melegperem"][0] == "sz√ºrke":
                        order_data["Egys√©g√°r"] = order_data["Egys√©g√°r"] + 35

                    order_data["√År"] = order_data.apply(
                        lambda row: row["Egys√©g√°r"] * row['√ñssz ter√ºlet'], axis=1
                    )

                    order_data["√År"] = order_data["√År"].apply(np.ceil)
                    st.dataframe(order_data[
                                     ["Sz√©less√©g", "Magass√°g", "Darabsz√°m", "√úveg vastags√°ga", "Melegperem", "Ter√ºlet",
                                      "Adal√©k", "√úveg t√≠pusa", "√ñssz ter√ºlet", "√År"]])

                    st.write(f"üí∞ **Sz√°m√≠tott √°r:** {order_data["√År"].sum()} lej")
                else:
                    missing_cols = [col for col in required_columns if col not in order_data.columns]
                    st.error(f"‚ùå Hi√°nyz√≥ oszlopok: {', '.join(missing_cols)}")
            except Exception as e:
                st.error(f"Hiba t√∂rt√©nt a f√°jl feldolgoz√°sa k√∂zben: {e}")

            arlista_szint = 2 if not df_cegek_arlista.loc[
                df_cegek_arlista["Ceg neve"] == megrendelo_neve, "Arlista"].empty else 0

            order_data["Egys√©g√°r"] = order_data.apply(
                lambda row: get_ar(df_termek_kod, row["√úveg t√≠pusa"], arlista_szint),
                axis=1
            )

            pdf_buffer = gen_p.generate_pdf(order_data, "./logo_1.jpg", "pecset.jpg", "file")

            st.download_button(
                label="üì• Let√∂lt√©s PDF-k√©nt",
                data=pdf_buffer,
                file_name=f"{megrendelo_neve}_{datetime.datetime.now()}_arajanlat.pdf",
                mime="application/pdf"
            )

            if st.button("‚úÖ √Åraj√°nlat elfogad√°sa"):
                try:
                    deadlines = pd.read_csv(C.CSV_FILE)
                except FileNotFoundError:
                    deadlines = pd.DataFrame(columns=["title", "start"])

                new_entry = pd.DataFrame([{"title": f"{megrendelo_neve} {sorszam}", "start": f"{hatarido}"}])
                deadlines = pd.concat([deadlines, new_entry], ignore_index=True)
                deadlines.to_csv(C.CSV_FILE, index=False)  # üìÇ F√°jlba ment√©s

            st.title("Optimaliz√°lt l√©cv√°g√°si Kalkul√°tor")

            # lec m√©retek sz√°m√≠t√°sa
            lec_lista = calculate_wood_pieces(order_data,
                                              get_retegek_by_kod(order_data.iloc[0]["√úveg t√≠pusa"], duplex_codes,
                                                                 triplex_codes))
            st.dataframe(order_data)
            st.write(order_data.iloc[0]["√úveg t√≠pusa"])

            # Optimaliz√°lt v√°g√°si terv kisz√°m√≠t√°sa
            cutting_plan, hulladekok = optimize_cutting(lec_lista, 6000)

            # √ñsszes hullad√©k kisz√°m√≠t√°sa
            osszes_hulladek_mm = sum(hulladekok)
            osszes_hulladek_cm = osszes_hulladek_mm / 10

            # Eredm√©nyek megjelen√≠t√©se
            st.subheader("Optimaliz√°lt V√°g√°si Terv")
            for i, batch in enumerate(cutting_plan):
                st.write(f"**{i + 1}. lec (6m)**: {batch} mm")
                st.write(f"‚û°Ô∏è Felhaszn√°lt hossz: {sum(batch)} mm | Hullad√©k: {hulladekok[i]} mm")

            st.subheader("√ñsszegz√©s")
            st.write(f"**Felhaszn√°lt lecek sz√°ma:** {len(cutting_plan)} db")
            st.write(f"**√ñsszes hullad√©k:** {osszes_hulladek_mm} mm ({osszes_hulladek_cm:.2f} cm)")
            st.write(f"**Hullad√©k hosszok mm-ben:** {hulladekok}")

            # Let√∂lthet≈ë v√°g√°si terv
            cutting_df = pd.DataFrame({
                "lec sorsz√°m": list(range(1, len(cutting_plan) + 1)),
                "V√°gott m√©retek": [str(batch) for batch in cutting_plan],
                "Hullad√©k (mm)": hulladekok
            })

            csv = cutting_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="V√°g√°si terv let√∂lt√©se CSV form√°tumban",
                data=csv,
                file_name="lec_vagasi_terv.csv",
                mime="text/csv",
            )
