import streamlit as st
import pandas as pd
import read_excel
import numpy as np
import generate_price_offer as gen_p
import datetime
import constants as C
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import toml
from app import modify_calendar_data, collect_calendar_data
import json

deadlines = collect_calendar_data()

# Pr√≥b√°ljuk meg beolvasni a secrets f√°jlt
try:
    secrets = toml.load(".streamlit/secrets.toml")  # Vagy "config.toml"
    users = secrets.get("users", {})
except Exception as e:
    st.error(f"Hiba a secrets.toml bet√∂lt√©sekor: {e}")
    users = {}


# E-mail k√ºld≈ë f√ºggv√©ny (PDF csatol√°s√°val)
def send_email(pdf_bytes, order_data, sorszam, hatarido, user_name=None):
    if user_name and user_name in st.secrets["users"]:  # üîπ B√°rmilyen user keres√©se
        user_data = st.secrets["users"][user_name]  # üîπ User adatai

        gmail_user = user_data.get("email_cim")  # üîπ Biztos, hogy nem dob hib√°t
        gmail_password = user_data.get("email_kod")

        if not gmail_user or not gmail_password:
            print(f"‚ö†Ô∏è Hiba: A {user_name} felhaszn√°l√≥n√°l hi√°nyz√≥ email adatok!")
            return

        recipient = st.secrets["email"].get("recipient", "default@domain.com")  # üîπ Ha nincs megadva, alap√©rtelmezett
    else:
        print(f"‚ö†Ô∏è Hiba: {user_name} nem tal√°lhat√≥ a secrets-ben! Alap√©rtelmezett fi√≥kot haszn√°lunk.")
        gmail_user = st.secrets["email"]["gmail_user"]
        gmail_password = st.secrets["email"]["gmail_password"]
        recipient = st.secrets["email"]["recipient"]

    st.write(f"üì© Email k√ºld√©se **{gmail_user}** c√≠mr≈ël ide: {recipient}")


    subject = f"√öj √°raj√°nlat ellen≈ërz√©sre t≈ële {order_data["Megrendelo_neve"].iloc[0]} Sorsz√°m {round(sorszam)}"
    body = ("Egy √∫j √°raj√°nlat √©rkezett ellen≈ërz√©sre.\n"
            "Inf√≥k r√≥la:\n"
            f"Megrendel≈ë: {order_data["Megrendelo_neve"].iloc[0]}\n"
            f"Sorsz√°m: {round(sorszam)}\n"
            f"ELk√ºld√©si id≈ë {str(datetime.date.today())}\n"
            f"Hat√°rid≈ë: {hatarido}\n"
            "Csatoltam a f√°jlt.")

    # E-mail l√©trehoz√°sa
    msg = MIMEMultipart()
    msg["From"] = gmail_user
    msg["To"] = recipient
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain"))

    # PDF csatol√°sa
    part = MIMEBase("application", "octet-stream")
    part.set_payload(pdf_bytes)  # K√∂zvetlen√ºl b√°jtokat adunk √°t
    encoders.encode_base64(part)
    part.add_header("Content-Disposition", "attachment; filename=arajanlat.pdf")
    msg.attach(part)

    # E-mail k√ºld√©se SMTP-n kereszt√ºl
    try:
        server = smtplib.SMTP_SSL("smtp.gmail.com", 465)
        server.login(gmail_user, gmail_password)
        server.sendmail(gmail_user, recipient, msg.as_string())
        server.quit()
        return "Sikeresen elk√ºldve!"
    except Exception as e:
        return f"Hiba t√∂rt√©nt: {e}"

# üîπ TER√úLET SZ√ÅM√çT√ÅS
def terulet_szamitas(hosszusag, szelesseg, darabszam, spec_forma=False, tavtarto=False):
    # Alapter√ºlet sz√°m√≠t√°sa
    try:
        hosszusag = float(hosszusag)
        szelesseg = float(szelesseg)
        darabszam = int(darabszam)
    except ValueError:
        return [0, 0, 0]

    if hosszusag and szelesseg:
        terulet_siman = (hosszusag * szelesseg) / 1000000  # m^2-re √°tv√°ltva, ha mm-ben van megadva

        # Adal√©k sz√°m√≠t√°sa
        adalek = 0
        terulet_adalekkal = terulet_siman
        if terulet_siman <= C.MIN_TERULET or terulet_siman >= C.MAX_TERULET:
            adalek = C.ADALEK_SZORZO * terulet_siman
            terulet_adalekkal = terulet_siman + adalek  # Hozz√°adjuk az adal√©kot az alapter√ºlethez

        # T√°vtart√≥ vagy speci√°lis forma eset√©n √∫jabb 30% adal√©k az aktu√°lis ter√ºletre
        if spec_forma == "Elt√©r≈ë forma":
            adalek += C.FORMA_SZORZO * terulet_adalekkal
            terulet_adalekkal += C.FORMA_SZORZO * terulet_adalekkal  # Friss√≠tett ter√ºlet az adal√©kkal

        if tavtarto == "T√°vtart√≥":
            adalek += C.TAVTARTO_ADALEK * terulet_adalekkal
            terulet_adalekkal += C.TAVTARTO_ADALEK * terulet_adalekkal

        if terulet_adalekkal >= C.MAX_TERULET:
            st.warning("‚ö†Ô∏è Ellen≈ërizd a vastags√°got, biztons√°gi okokb√≥l!")

        # √ñsszes ter√ºlet sz√°m√≠t√°sa a darabsz√°mmal
        ossz_terulet = terulet_adalekkal * darabszam

        return [round(terulet_siman, 4) * darabszam, round(adalek, 4) * darabszam, round(ossz_terulet, 2)]
    else:
        st.error("‚ùå K√©rlek add meg a hossz√∫s√°got √©s a sz√©less√©get!")


@st.cache_data
def get_retegek_by_kod(termek_kod, duplex_list, triplex_list):
    if termek_kod in duplex_list:
        return "DUPLEX"
    elif termek_kod in triplex_list:
        return "TRIPLEX"


# üîπ √ÅR KALKUL√ÅCI√ì
@st.cache_data
def get_ar(df, termek_kod, arlista_szint):
    column_name = f"Elad√°si √År {arlista_szint}"
    filtered_rows = df.loc[df["Term√©k Kod"] == termek_kod, column_name]
    return float(filtered_rows.iloc[0]) if not filtered_rows.empty else None


def calculate_wood_pieces(df, reteg):
    lec_lista = []

    for _, row in df.iterrows():
        szelesseg = row["Sz√©less√©g"] + 20
        magassag = row["Magass√°g"] + 20

        lec_darabszam = 1 if reteg == "DUPLEX" else 2 if reteg == "TRIPLEX" else 1

        for _ in range(lec_darabszam):
            lec_lista.append(szelesseg)
            lec_lista.append(magassag)

    return sorted(lec_lista, reverse=True)  # Hosszabbakat el≈ësz√∂r


def optimize_cutting(lec_lista, max_length=6000):
    lec_lista = sorted(lec_lista, reverse=True)  # Cs√∂kken≈ë sorrendben rendezz√ºk (FFD strat√©gia)
    bins = []  # T√°roljuk a darabol√°sokat
    hulladekok = []  # T√°roljuk a hullad√©kokat

    for lec in lec_lista:
        best_fit_index = -1
        min_remaining_space = max_length + 1  # Kezdetben nagy √©rt√©k

        # Pr√≥b√°ljuk megtal√°lni a legjobb helyet
        for i, bin in enumerate(bins):
            remaining_space = max_length - sum(bin)
            if remaining_space >= lec and remaining_space - lec < min_remaining_space:
                best_fit_index = i
                min_remaining_space = remaining_space - lec

        # Ha van megfelel≈ë hely, beletessz√ºk
        if best_fit_index != -1:
            bins[best_fit_index].append(lec)
        else:
            # √öj v√°g√°st kezd√ºnk
            bins.append([lec])

    # Hullad√©k sz√°m√≠t√°sa
    hulladekok = [max_length - sum(bin) for bin in bins]

    return bins, hulladekok


def show(user_role: str, user_name:str):
    # üîπ EXCEL ADATOK BET√ñLT√âSE (Cache-el√©s)
    @st.cache_data
    def load_excel_data(file_path):
        df_termek_kod = pd.read_excel(file_path, sheet_name='TermekKod')
        df_vastagsag = pd.read_excel(file_path, sheet_name='Vastagsag')
        df_cegek_arlista = pd.read_excel(file_path, sheet_name='Arlista')
        return df_termek_kod, df_vastagsag, df_cegek_arlista

    df_termek_kod, df_vastagsag, df_cegek_arlista = load_excel_data(C.FILE_PATH)

    # üîπ TERM√âKK√ìDOK LEK√âR√âSE (Cache)
    @st.cache_data
    def get_product_codes(df, reteg):
        return df[df["Reteg"] == reteg]["Term√©k Kod"].tolist()

    duplex_codes = get_product_codes(df_termek_kod, "Duplex")
    triplex_codes = get_product_codes(df_termek_kod, "Triplex")
    vastagsag_lista = [""] + df_vastagsag["Vastagsag"].tolist()

    # üîπ RENDEL√âSEK T√ÅROL√ÅSA
    if "adathalmaz" not in st.session_state:
        st.session_state.adathalmaz = pd.DataFrame(
            columns=["Megrendel≈ë", "Hossz√∫s√°g", "Sz√©less√©g", "Darabsz√°m", "Ter√ºlet", "√År"])

    # üîπ FEL√úLET MEGJELEN√çT√âSE
    st.title(" ü™ü Term√≥ rendel√©sek")

    bevitel = st.radio("Hogyan szeretn√©d bevinni az adatokat?", ["K√©zi bevitel", "F√°jl felt√∂lt√©se"])
    megrendelok_lista = df_cegek_arlista["Ceg neve"]

    if bevitel == "K√©zi bevitel":
        if user_role != "vasarlo":
            megrendelo_neve = st.selectbox("Megrendel≈ë neve:", megrendelok_lista)
            if megrendelo_neve == "Mag√°nszem√©ly":
                megrendelo_neve = st.text_input("√çrd be a megrendel≈ë nev√©t")
        else:
            megrendelo_neve = user_name

        rendeles_sorszama = st.number_input("Rendel√©s sorsz√°ma", step=1)

        hatarido = st.date_input("K√©rlek add meg az elk√©sz√≠t√©s hat√°ridej√©t:", datetime.date.today())

        tipus = st.radio("V√°laszd ki a term√≥ t√≠pus√°t", ["Duplex", "Triplex"])
        termek_kod = st.selectbox("Term√©k k√≥d", duplex_codes if tipus == "Duplex" else triplex_codes)
        vastagsag = st.selectbox("Vastags√°g:", vastagsag_lista)

        st.write("**Opci√≥k**")
        col1, col2 = st.columns(2)
        with col1:
            argon = st.checkbox("Argonnal")
            if argon:
                argon = "Argon"
            melegperem = st.checkbox("Meleg perem")
        with col2:
            tavtarto = st.checkbox("T√°vtart√≥")
            if tavtarto:
                tavtarto = "T√°vtart√≥"
            forma = st.checkbox("Elt√©r≈ë forma")
            if forma:
                forma = "Elt√©r≈ë forma"

        melegperem_szin = st.radio("Melegperem sz√≠ne", ["Fekete", "Sz√ºrke"]) if melegperem else None

        szelesseg = st.number_input("Sz√©less√©g (mm)", min_value=1, max_value=C.MAX_MERET,
                                    placeholder="√çrj be egy sz√°mot...")
        hosszusag = st.number_input("Hossz√∫s√°g (mm)", min_value=1, max_value=C.MAX_MERET,
                                    placeholder="√çrj be egy sz√°mot...")
        darabszam = st.number_input("Darabsz√°m", min_value=1, value=1, placeholder="√çrj be egy sz√°mot...")



        [terulet, adalek, ossz_terulet] = terulet_szamitas(hosszusag, szelesseg, darabszam, forma, tavtarto)
        st.write(f" Az √ºveg ter√ºlete {round(terulet, 2)} m¬≤, melyhez hozz√°j√∂n adal√©kk√©nt \
        {round(adalek, 2)} m¬≤, √≠gy az √∂sszter√ºlet = {round(terulet, 2)}  + {round(adalek, 2)} = {round(ossz_terulet, 2)} m¬≤")

        ar = 0
        if terulet > 0:
            arlista_szint = 2 if not df_cegek_arlista.loc[
                df_cegek_arlista["Ceg neve"] == megrendelo_neve, "Arlista"].empty else 0
            eladasi_ar = get_ar(df_termek_kod, termek_kod, arlista_szint)

            if eladasi_ar:
                if melegperem_szin:
                    eladasi_ar += C.MELEGPEREM_AR.get(tipus, 0)
                ar = ossz_terulet * eladasi_ar

            st.write(f"üí∞ **Sz√°m√≠tott √°r:** {round(ar,2)} lej")

        if st.button("Hozz√°ad"):
            if megrendelo_neve and termek_kod and tipus and vastagsag and rendeles_sorszama:
                uj_sorszam = 1 if st.session_state.adathalmaz.empty else int(st.session_state.adathalmaz[
                                                                             "Sorsz√°m"].max()) + 1

                bevitt_adatok = {
                    "Sorsz√°m": uj_sorszam,
                    "Megrendelo_neve": megrendelo_neve,
                    "Term√©kk√≥d": termek_kod,
                    "√úveg vastags√°ga": vastagsag,
                    "Magass√°g": hosszusag,
                    "Sz√©less√©g": szelesseg,
                    "Ter√ºlet": terulet,
                    "Adal√©k": adalek,
                    "√ñssz ter√ºlet": ossz_terulet,
                    "Darabsz√°m": darabszam,
                    "√År": ar,
                    "Argon": argon,
                    "T√°vtart√≥": tavtarto,
                    "Melegperem": melegperem_szin,
                    "Elt√©r≈ë forma": forma,
                    "√úveg t√≠pusa": tipus
                }

                st.session_state.adathalmaz = pd.concat(
                    [st.session_state.adathalmaz, pd.DataFrame([bevitt_adatok])],
                    ignore_index=True
                )

                st.success("Sor hozz√°adva!")
                st.rerun()
            else:
                st.warning("K√©rlek, t√∂ltsd ki a k√∂telez≈ë mez≈ëket!")

        # Adatt√°bla megjelen√≠t√©se
        if not st.session_state.adathalmaz.empty:
            st.dataframe(st.session_state.adathalmaz[[
                "Sorsz√°m", "Term√©kk√≥d", "Sz√©less√©g", "Magass√°g", "Darabsz√°m", "√úveg vastags√°ga",
                "Melegperem", "T√°vtart√≥", "Elt√©r≈ë forma", "Ter√ºlet", "Adal√©k", "√ñssz ter√ºlet", "√År"
            ]], use_container_width=True, hide_index=True)

            # Sor t√∂rl√©se
            st.session_state.adathalmaz["Sorsz√°m"] = st.session_state.adathalmaz["Sorsz√°m"].astype(int)
            sorszamok = st.session_state.adathalmaz["Sorsz√°m"].tolist()
            st.header("Elrontottad? T√∂r√∂ld ki ‚úèÔ∏è")

            sorszam_to_delete = st.selectbox("V√°lassz sorsz√°mot t√∂rl√©shez:", sorszamok)

            if st.button("Sor t√∂rl√©se"):
                st.session_state.adathalmaz = st.session_state.adathalmaz[
                    st.session_state.adathalmaz["Sorsz√°m"] != sorszam_to_delete
                    ].reset_index(drop=True)
                st.success(f"A(z) {sorszam_to_delete}. sor t√∂r√∂lve!")
                st.rerun()
        else:
            st.warning("Nincs adat a t√°bl√°zatban!")

        order_data_kezi = st.session_state.adathalmaz
        if not order_data_kezi.empty:
            pdf_buffer = gen_p.generate_pdf(order_data_kezi,
                                            "./logo_1.jpg",
                                            "pecset.jpg",
                                            "kezi",
                                            rendeles_sorszama
                                            )
            gyartas_pdf_buffer = gen_p.generate_gyartasi_pdf(order_data_kezi, "kezi", rendeles_sorszama, hatarido)

            st.header("√Åraj√°nlat gener√°l√°sa üßÆ")
            st.download_button(
                label="üì• Let√∂lt√©s PDF-k√©nt",
                data=pdf_buffer,
                file_name=f"{megrendelo_neve}_{datetime.datetime.now()}_arajanlat.pdf",
                mime="application/pdf"
            )

            if user_role != "vasarlo":
                st.header("Gy√°rt√°si adatok gener√°l√°sa üí°")
                st.download_button(
                    label="üì• Let√∂lt√©s PDF-k√©nt",
                    data=gyartas_pdf_buffer,
                    file_name=f"{megrendelo_neve}_{datetime.datetime.now()}_gyartas.pdf",
                    mime="application/pdf"
                )

            st.header("Rendel√©s lead√°sa üõí")
            task_name = f"{order_data_kezi["Megrendelo_neve"].iloc[0]} {round(rendeles_sorszama)}"
            if st.button("‚úÖ √Åraj√°nlat elfogad√°sa"):
                if user_role == "vasarlo":
                    result = send_email(pdf_buffer.getvalue(),
                                        order_data_kezi,
                                        rendeles_sorszama, hatarido,
                                        st.session_state.username)  # Kiolvassuk a tartalmat b√°jtokk√©nt
                    if "Sikeresen" in result:
                        st.success(result)
                    else:
                        st.error(result)
                # √öj feladat hozz√°ad√°sa
                if task_name:
                    new_entry = pd.DataFrame([{"title": task_name, "start": str(hatarido), "Ter√ºlet": str(sum(order_data_kezi["√ñssz ter√ºlet"])), "Darabsz√°m": str(sum(order_data_kezi["Darabsz√°m"]))}])
                    
                    # A megl√©v≈ë napt√°r adatokat lek√©rj√ºk
                    deadlines = collect_calendar_data()  # Adatok beolvas√°sa a Google Sheets-b≈ël
                
                    # √öj bejegyz√©s hozz√°ad√°sa
                    deadlines = pd.concat([deadlines, new_entry], ignore_index=True)
                    
                    # A friss√≠tett adatokat vissza√≠rjuk a Google Sheets-be
                    modify_calendar_data(deadlines)  # Az adatokat a Google Sheets-be mentj√ºk
                
                    st.success(f"‚úÖ A k√©r√©sed hozz√°adtuk a napt√°runkhoz: {task_name} - {hatarido}")
                    # Optional: friss√≠theted az oldalt, ha sz√ºks√©ges
                    st.rerun()

                else:
                    st.warning("‚ö†Ô∏è Adj meg egy feladatot!")
            if user_role == "vasarlo":
                st.error(f"FIGYELEM!!! A rendel√©s v√©gleges√≠t√©s√©hez egy alkalmazottunk √°tn√©zi a rendel√©sed.")

    elif bevitel == "F√°jl felt√∂lt√©se":
        uploaded_file = st.file_uploader("Choose a XLSX file", type="xlsx")

        if uploaded_file:
            try:
                order_data = read_excel.extract_order_data(uploaded_file)
                megrendelo_neve = order_data['Megrendel≈ë_neve'].iloc[0]
                hatarido = str(order_data['Hat√°rid≈ë'].iloc[0]).split(" ")[0]
                sorszam = order_data['Sorsz√°m_Megrendel√©s'].iloc[0]
                arlista_szint = 2 if not df_cegek_arlista.loc[
                    df_cegek_arlista["Ceg neve"] == megrendelo_neve, "Arlista"].empty else 0
                order_data["Megrendelo_neve"] = megrendelo_neve
                required_columns = ["Sz√©less√©g", "Magass√°g", "√úveg t√≠pusa"]
                if all(col in order_data.columns for col in required_columns):

                    order_data['Ter√ºlet'] = order_data.apply(
                        lambda row: terulet_szamitas(row['Magass√°g'],
                                                     row['Sz√©less√©g'],
                                                     row['Darabsz√°m'],
                                                     row["Elt√©r≈ë forma"],
                                                     row["T√°vtart√≥"]
                                                     )[0], axis=1)
                    order_data['Adal√©k'] = order_data.apply(
                        lambda row: terulet_szamitas(row['Magass√°g'],
                                                     row['Sz√©less√©g'],
                                                     row['Darabsz√°m'],
                                                     row["Elt√©r≈ë forma"],
                                                     row["T√°vtart√≥"]
                                                     )[1], axis=1)
                    order_data['√ñssz ter√ºlet'] = order_data.apply(
                        lambda row: terulet_szamitas(row['Magass√°g'],
                                                     row['Sz√©less√©g'],
                                                     row['Darabsz√°m'],
                                                     row["Elt√©r≈ë forma"],
                                                     row["T√°vtart√≥"]
                                                     )[2], axis=1)

                    order_data["Egys√©g√°r"] = order_data.apply(
                        lambda row: get_ar(df_termek_kod, row["√úveg t√≠pusa"], arlista_szint), axis=1
                    )

                    if order_data["Melegperem"][0] == "fekete" or order_data["Melegperem"][0] == "sz√ºrke":
                        order_data["Egys√©g√°r"] = order_data["Egys√©g√°r"] + 35

                    order_data["√År"] = order_data.apply(
                        lambda row: row["Egys√©g√°r"] * row['√ñssz ter√ºlet'], axis=1
                    )

                    order_data["√År"] = order_data["√År"]
                    st.dataframe(order_data[
                                     ["Sz√©less√©g", "Magass√°g", "Darabsz√°m", "√úveg vastags√°ga", "Melegperem", "Ter√ºlet",
                                      "Adal√©k", "√úveg t√≠pusa", "√ñssz ter√ºlet", "√År"]])

                    st.write(f"üí∞ **Sz√°m√≠tott √°r:** {np.ceil(order_data["√År"].sum())} lej")
                else:
                    missing_cols = [col for col in required_columns if col not in order_data.columns]
                    st.error(f"‚ùå Hi√°nyz√≥ oszlopok: {', '.join(missing_cols)}")
            except Exception as e:
                st.error(f"Hiba t√∂rt√©nt a f√°jl feldolgoz√°sa k√∂zben: {e}")

            arlista_szint = 2 if not df_cegek_arlista.loc[
                df_cegek_arlista["Ceg neve"] == megrendelo_neve, "Arlista"].empty else 0

            order_data["Egys√©g√°r"] = order_data.apply(
                lambda row: get_ar(df_termek_kod, row["√úveg t√≠pusa"], arlista_szint),
                axis=1
            )

            pdf_buffer = gen_p.generate_pdf(order_data, "./logo_1.jpg", "pecset.jpg", "file" )
            gyartas_pdf_buffer = gen_p.generate_gyartasi_pdf(order_data, bevitel="file", sorszam=None)

            st.header("√Åraj√°nlat gener√°l√°sa üßÆ")

            st.download_button(
                label="üì• Let√∂lt√©s PDF-k√©nt",
                data=pdf_buffer,
                file_name=f"{megrendelo_neve}_{datetime.datetime.now()}_arajanlat.pdf",
                mime="application/pdf"
            )

            if user_role != "vasarlo":
                st.header("Gy√°rt√°si adatok gener√°l√°sa üí°")
                st.download_button(
                    label="üì• Let√∂lt√©s PDF-k√©nt",
                    data=gyartas_pdf_buffer,
                    file_name=f"{megrendelo_neve}_{datetime.datetime.now()}_gyartas.pdf",
                    mime="application/pdf"
                )

            st.header("Rendel√©s lead√°sa üõí")
            if st.button("‚úÖ √Åraj√°nlat elfogad√°sa"):
                if user_role not in ["glaserdi_fonok", "glaserdi_alkalmazott"]:
                    result = send_email(pdf_buffer.getvalue(), order_data, sorszam,
                                        hatarido, st.session_state.username)  # Kiolvassuk a tartalmat b√°jtokk√©nt
                    if "Sikeresen" in result:
                        st.success(result)
                    else:
                        st.error(result)
                        

                deadlines = collect_calendar_data()
                
                # Az √∫j bejegyz√©s hozz√°ad√°sa
                # new_entry = pd.DataFrame([{"title": f"{megrendelo_neve} {sorszam}", "start": f"{hatarido}"}])
                new_entry = pd.DataFrame([{"title": f"{megrendelo_neve} {sorszam}", "start": str(hatarido), "Ter√ºlet": str(sum(order_data["√ñssz ter√ºlet"])), "Darabsz√°m": str(sum(order_data["Darabsz√°m"]))}])
                # A √∫j bejegyz√©s hozz√°ad√°sa a megl√©v≈ë deadlines DataFrame-hez
                deadlines_modified = pd.concat([deadlines, new_entry], ignore_index=True)
                
                # Google Sheets friss√≠t√©se
                modify_calendar_data(deadlines_modified)
                
                # Visszajelz√©s a felhaszn√°l√≥nak
                st.success(f"‚úÖ √öj hat√°rid≈ë hozz√°adva: {megrendelo_neve} {sorszam}, D√°tum: {hatarido}")




                # st.title("Optimaliz√°lt l√©cv√°g√°si Kalkul√°tor")
                #
                # # lec m√©retek sz√°m√≠t√°sa
                # lec_lista = calculate_wood_pieces(order_data,
                #                                   get_retegek_by_kod(order_data.iloc[0]["√úveg t√≠pusa"], duplex_codes,
                #                                                      triplex_codes))
                # st.dataframe(order_data)
                # st.write(order_data.iloc[0]["√úveg t√≠pusa"])
                #
                # # Optimaliz√°lt v√°g√°si terv kisz√°m√≠t√°sa
                # cutting_plan, hulladekok = optimize_cutting(lec_lista, 6000)
                #
                # # √ñsszes hullad√©k kisz√°m√≠t√°sa
                # osszes_hulladek_mm = sum(hulladekok)
                # osszes_hulladek_cm = osszes_hulladek_mm / 10
                #
                # # Eredm√©nyek megjelen√≠t√©se
                # st.subheader("Optimaliz√°lt V√°g√°si Terv")
                # for i, batch in enumerate(cutting_plan):
                #     st.write(f"**{i + 1}. lec (6m)**: {batch} mm")
                #     st.write(f"‚û°Ô∏è Felhaszn√°lt hossz: {sum(batch)} mm | Hullad√©k: {hulladekok[i]} mm")
                #
                # st.subheader("√ñsszegz√©s")
                # st.write(f"**Felhaszn√°lt lecek sz√°ma:** {len(cutting_plan)} db")
                # st.write(f"**√ñsszes hullad√©k:** {osszes_hulladek_mm} mm ({osszes_hulladek_cm:.2f} cm)")
                # st.write(f"**Hullad√©k hosszok mm-ben:** {hulladekok}")
                #
                # # Let√∂lthet≈ë v√°g√°si terv
                # cutting_df = pd.DataFrame({
                #     "lec sorsz√°m": list(range(1, len(cutting_plan) + 1)),
                #     "V√°gott m√©retek": [str(batch) for batch in cutting_plan],
                #     "Hullad√©k (mm)": hulladekok
                # })
                #
                # csv = cutting_df.to_csv(index=False).encode('utf-8')
                # st.download_button(
                #     label="V√°g√°si terv let√∂lt√©se CSV form√°tumban",
                #     data=csv,
                #     file_name="lec_vagasi_terv.csv",
                #     mime="text/csv",
                # )
